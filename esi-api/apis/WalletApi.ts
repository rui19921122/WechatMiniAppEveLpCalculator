/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdWalletJournal200Ok,
    GetCharactersCharacterIdWalletJournal200OkFromJSON,
    GetCharactersCharacterIdWalletJournal200OkToJSON,
    GetCharactersCharacterIdWalletTransactions200Ok,
    GetCharactersCharacterIdWalletTransactions200OkFromJSON,
    GetCharactersCharacterIdWalletTransactions200OkToJSON,
    GetCorporationsCorporationIdWallets200Ok,
    GetCorporationsCorporationIdWallets200OkFromJSON,
    GetCorporationsCorporationIdWallets200OkToJSON,
    GetCorporationsCorporationIdWalletsDivisionJournal200Ok,
    GetCorporationsCorporationIdWalletsDivisionJournal200OkFromJSON,
    GetCorporationsCorporationIdWalletsDivisionJournal200OkToJSON,
    GetCorporationsCorporationIdWalletsDivisionTransactions200Ok,
    GetCorporationsCorporationIdWalletsDivisionTransactions200OkFromJSON,
    GetCorporationsCorporationIdWalletsDivisionTransactions200OkToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    Unauthorized,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdWalletRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdWalletDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdWalletJournalRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdWalletJournalDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCharactersCharacterIdWalletTransactionsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdWalletTransactionsDatasourceEnum;
    fromId?: number;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdWalletsRequest {
    corporationId: number;
    datasource?: GetCorporationsCorporationIdWalletsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCorporationsCorporationIdWalletsDivisionJournalRequest {
    corporationId: number;
    division: number;
    datasource?: GetCorporationsCorporationIdWalletsDivisionJournalDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
    corporationId: number;
    division: number;
    datasource?: GetCorporationsCorporationIdWalletsDivisionTransactionsDatasourceEnum;
    fromId?: number;
    ifNoneMatch?: string;
    token?: string;
}

/**
 * 
 */
export class WalletApi extends runtime.BaseAPI {

    /**
     * Returns a character\'s wallet balance  --- Alternate route: `/legacy/characters/{character_id}/wallet/`  Alternate route: `/v1/characters/{character_id}/wallet/`  --- This route is cached for up to 120 seconds  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/wallet/)
     * Get a character\'s wallet balance
     */
    async getCharactersCharacterIdWalletRaw(requestParameters: GetCharactersCharacterIdWalletRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_character_wallet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/wallet/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns a character\'s wallet balance  --- Alternate route: `/legacy/characters/{character_id}/wallet/`  Alternate route: `/v1/characters/{character_id}/wallet/`  --- This route is cached for up to 120 seconds  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/wallet/)
     * Get a character\'s wallet balance
     */
    async getCharactersCharacterIdWallet(requestParameters: GetCharactersCharacterIdWalletRequest): Promise<number> {
        const response = await this.getCharactersCharacterIdWalletRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/v6/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
     * Get character wallet journal
     */
    async getCharactersCharacterIdWalletJournalRaw(requestParameters: GetCharactersCharacterIdWalletJournalRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdWalletJournal200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdWalletJournal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_character_wallet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/wallet/journal/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdWalletJournal200OkFromJSON));
    }

    /**
     * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/v6/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
     * Get character wallet journal
     */
    async getCharactersCharacterIdWalletJournal(requestParameters: GetCharactersCharacterIdWalletJournalRequest): Promise<Array<GetCharactersCharacterIdWalletJournal200Ok>> {
        const response = await this.getCharactersCharacterIdWalletJournalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get wallet transactions of a character  --- Alternate route: `/dev/characters/{character_id}/wallet/transactions/`  Alternate route: `/legacy/characters/{character_id}/wallet/transactions/`  Alternate route: `/v1/characters/{character_id}/wallet/transactions/`  --- This route is cached for up to 3600 seconds
     * Get wallet transactions
     */
    async getCharactersCharacterIdWalletTransactionsRaw(requestParameters: GetCharactersCharacterIdWalletTransactionsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdWalletTransactions200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdWalletTransactions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.fromId !== undefined) {
            queryParameters['from_id'] = requestParameters.fromId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_character_wallet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/wallet/transactions/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdWalletTransactions200OkFromJSON));
    }

    /**
     * Get wallet transactions of a character  --- Alternate route: `/dev/characters/{character_id}/wallet/transactions/`  Alternate route: `/legacy/characters/{character_id}/wallet/transactions/`  Alternate route: `/v1/characters/{character_id}/wallet/transactions/`  --- This route is cached for up to 3600 seconds
     * Get wallet transactions
     */
    async getCharactersCharacterIdWalletTransactions(requestParameters: GetCharactersCharacterIdWalletTransactionsRequest): Promise<Array<GetCharactersCharacterIdWalletTransactions200Ok>> {
        const response = await this.getCharactersCharacterIdWalletTransactionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a corporation\'s wallets  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Returns a corporation\'s wallet balance
     */
    async getCorporationsCorporationIdWalletsRaw(requestParameters: GetCorporationsCorporationIdWalletsRequest): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdWallets200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdWallets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_corporation_wallets.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/wallets/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdWallets200OkFromJSON));
    }

    /**
     * Get a corporation\'s wallets  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Returns a corporation\'s wallet balance
     */
    async getCorporationsCorporationIdWallets(requestParameters: GetCorporationsCorporationIdWalletsRequest): Promise<Array<GetCorporationsCorporationIdWallets200Ok>> {
        const response = await this.getCorporationsCorporationIdWalletsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the given corporation\'s wallet journal for the given division going 30 days back  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/journal/`  Alternate route: `/v4/corporations/{corporation_id}/wallets/{division}/journal/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Get corporation wallet journal
     */
    async getCorporationsCorporationIdWalletsDivisionJournalRaw(requestParameters: GetCorporationsCorporationIdWalletsDivisionJournalRequest): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdWalletsDivisionJournal.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling getCorporationsCorporationIdWalletsDivisionJournal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_corporation_wallets.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/wallets/{division}/journal/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))).replace(`{${"division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdWalletsDivisionJournal200OkFromJSON));
    }

    /**
     * Retrieve the given corporation\'s wallet journal for the given division going 30 days back  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/journal/`  Alternate route: `/v4/corporations/{corporation_id}/wallets/{division}/journal/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Get corporation wallet journal
     */
    async getCorporationsCorporationIdWalletsDivisionJournal(requestParameters: GetCorporationsCorporationIdWalletsDivisionJournalRequest): Promise<Array<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> {
        const response = await this.getCorporationsCorporationIdWalletsDivisionJournalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get wallet transactions of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/{division}/transactions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Get corporation wallet transactions
     */
    async getCorporationsCorporationIdWalletsDivisionTransactionsRaw(requestParameters: GetCorporationsCorporationIdWalletsDivisionTransactionsRequest): Promise<runtime.ApiResponse<Array<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>>> {
        if (requestParameters.corporationId === null || requestParameters.corporationId === undefined) {
            throw new runtime.RequiredError('corporationId','Required parameter requestParameters.corporationId was null or undefined when calling getCorporationsCorporationIdWalletsDivisionTransactions.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling getCorporationsCorporationIdWalletsDivisionTransactions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.fromId !== undefined) {
            queryParameters['from_id'] = requestParameters.fromId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-wallet.read_corporation_wallets.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/corporations/{corporation_id}/wallets/{division}/transactions/`.replace(`{${"corporation_id"}}`, encodeURIComponent(String(requestParameters.corporationId))).replace(`{${"division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCorporationsCorporationIdWalletsDivisionTransactions200OkFromJSON));
    }

    /**
     * Get wallet transactions of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/{division}/transactions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     * Get corporation wallet transactions
     */
    async getCorporationsCorporationIdWalletsDivisionTransactions(requestParameters: GetCorporationsCorporationIdWalletsDivisionTransactionsRequest): Promise<Array<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> {
        const response = await this.getCorporationsCorporationIdWalletsDivisionTransactionsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdWalletDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdWalletJournalDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdWalletTransactionsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCorporationsCorporationIdWalletsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCorporationsCorporationIdWalletsDivisionJournalDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCorporationsCorporationIdWalletsDivisionTransactionsDatasourceEnum {
    Serenity = 'serenity'
}
