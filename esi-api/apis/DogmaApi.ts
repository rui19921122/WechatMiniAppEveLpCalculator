/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetDogmaAttributesAttributeIdNotFound,
    GetDogmaAttributesAttributeIdNotFoundFromJSON,
    GetDogmaAttributesAttributeIdNotFoundToJSON,
    GetDogmaAttributesAttributeIdOk,
    GetDogmaAttributesAttributeIdOkFromJSON,
    GetDogmaAttributesAttributeIdOkToJSON,
    GetDogmaDynamicItemsTypeIdItemIdNotFound,
    GetDogmaDynamicItemsTypeIdItemIdNotFoundFromJSON,
    GetDogmaDynamicItemsTypeIdItemIdNotFoundToJSON,
    GetDogmaDynamicItemsTypeIdItemIdOk,
    GetDogmaDynamicItemsTypeIdItemIdOkFromJSON,
    GetDogmaDynamicItemsTypeIdItemIdOkToJSON,
    GetDogmaEffectsEffectIdNotFound,
    GetDogmaEffectsEffectIdNotFoundFromJSON,
    GetDogmaEffectsEffectIdNotFoundToJSON,
    GetDogmaEffectsEffectIdOk,
    GetDogmaEffectsEffectIdOkFromJSON,
    GetDogmaEffectsEffectIdOkToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
} from '../models';

export interface GetDogmaAttributesRequest {
    datasource?: GetDogmaAttributesDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetDogmaAttributesAttributeIdRequest {
    attributeId: number;
    datasource?: GetDogmaAttributesAttributeIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetDogmaDynamicItemsTypeIdItemIdRequest {
    itemId: number;
    typeId: number;
    datasource?: GetDogmaDynamicItemsTypeIdItemIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetDogmaEffectsRequest {
    datasource?: GetDogmaEffectsDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetDogmaEffectsEffectIdRequest {
    effectId: number;
    datasource?: GetDogmaEffectsEffectIdDatasourceEnum;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class DogmaApi extends runtime.BaseAPI {

    /**
     * Get a list of dogma attribute ids  --- Alternate route: `/dev/dogma/attributes/`  Alternate route: `/legacy/dogma/attributes/`  Alternate route: `/v1/dogma/attributes/`  --- This route expires daily at 11:05
     * Get attributes
     */
    async getDogmaAttributesRaw(requestParameters: GetDogmaAttributesRequest): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/dogma/attributes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a list of dogma attribute ids  --- Alternate route: `/dev/dogma/attributes/`  Alternate route: `/legacy/dogma/attributes/`  Alternate route: `/v1/dogma/attributes/`  --- This route expires daily at 11:05
     * Get attributes
     */
    async getDogmaAttributes(requestParameters: GetDogmaAttributesRequest): Promise<Array<number>> {
        const response = await this.getDogmaAttributesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get information on a dogma attribute  --- Alternate route: `/dev/dogma/attributes/{attribute_id}/`  Alternate route: `/legacy/dogma/attributes/{attribute_id}/`  Alternate route: `/v1/dogma/attributes/{attribute_id}/`  --- This route expires daily at 11:05
     * Get attribute information
     */
    async getDogmaAttributesAttributeIdRaw(requestParameters: GetDogmaAttributesAttributeIdRequest): Promise<runtime.ApiResponse<GetDogmaAttributesAttributeIdOk>> {
        if (requestParameters.attributeId === null || requestParameters.attributeId === undefined) {
            throw new runtime.RequiredError('attributeId','Required parameter requestParameters.attributeId was null or undefined when calling getDogmaAttributesAttributeId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/dogma/attributes/{attribute_id}/`.replace(`{${"attribute_id"}}`, encodeURIComponent(String(requestParameters.attributeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDogmaAttributesAttributeIdOkFromJSON(jsonValue));
    }

    /**
     * Get information on a dogma attribute  --- Alternate route: `/dev/dogma/attributes/{attribute_id}/`  Alternate route: `/legacy/dogma/attributes/{attribute_id}/`  Alternate route: `/v1/dogma/attributes/{attribute_id}/`  --- This route expires daily at 11:05
     * Get attribute information
     */
    async getDogmaAttributesAttributeId(requestParameters: GetDogmaAttributesAttributeIdRequest): Promise<GetDogmaAttributesAttributeIdOk> {
        const response = await this.getDogmaAttributesAttributeIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns info about a dynamic item resulting from mutation with a mutaplasmid.  --- Alternate route: `/dev/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/legacy/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/v1/dogma/dynamic/items/{type_id}/{item_id}/`  --- This route expires daily at 11:05
     * Get dynamic item information
     */
    async getDogmaDynamicItemsTypeIdItemIdRaw(requestParameters: GetDogmaDynamicItemsTypeIdItemIdRequest): Promise<runtime.ApiResponse<GetDogmaDynamicItemsTypeIdItemIdOk>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getDogmaDynamicItemsTypeIdItemId.');
        }

        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getDogmaDynamicItemsTypeIdItemId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/dogma/dynamic/items/{type_id}/{item_id}/`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDogmaDynamicItemsTypeIdItemIdOkFromJSON(jsonValue));
    }

    /**
     * Returns info about a dynamic item resulting from mutation with a mutaplasmid.  --- Alternate route: `/dev/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/legacy/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/v1/dogma/dynamic/items/{type_id}/{item_id}/`  --- This route expires daily at 11:05
     * Get dynamic item information
     */
    async getDogmaDynamicItemsTypeIdItemId(requestParameters: GetDogmaDynamicItemsTypeIdItemIdRequest): Promise<GetDogmaDynamicItemsTypeIdItemIdOk> {
        const response = await this.getDogmaDynamicItemsTypeIdItemIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of dogma effect ids  --- Alternate route: `/dev/dogma/effects/`  Alternate route: `/legacy/dogma/effects/`  Alternate route: `/v1/dogma/effects/`  --- This route expires daily at 11:05
     * Get effects
     */
    async getDogmaEffectsRaw(requestParameters: GetDogmaEffectsRequest): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/dogma/effects/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a list of dogma effect ids  --- Alternate route: `/dev/dogma/effects/`  Alternate route: `/legacy/dogma/effects/`  Alternate route: `/v1/dogma/effects/`  --- This route expires daily at 11:05
     * Get effects
     */
    async getDogmaEffects(requestParameters: GetDogmaEffectsRequest): Promise<Array<number>> {
        const response = await this.getDogmaEffectsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get information on a dogma effect  --- Alternate route: `/dev/dogma/effects/{effect_id}/`  Alternate route: `/v2/dogma/effects/{effect_id}/`  --- This route expires daily at 11:05
     * Get effect information
     */
    async getDogmaEffectsEffectIdRaw(requestParameters: GetDogmaEffectsEffectIdRequest): Promise<runtime.ApiResponse<GetDogmaEffectsEffectIdOk>> {
        if (requestParameters.effectId === null || requestParameters.effectId === undefined) {
            throw new runtime.RequiredError('effectId','Required parameter requestParameters.effectId was null or undefined when calling getDogmaEffectsEffectId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/dogma/effects/{effect_id}/`.replace(`{${"effect_id"}}`, encodeURIComponent(String(requestParameters.effectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDogmaEffectsEffectIdOkFromJSON(jsonValue));
    }

    /**
     * Get information on a dogma effect  --- Alternate route: `/dev/dogma/effects/{effect_id}/`  Alternate route: `/v2/dogma/effects/{effect_id}/`  --- This route expires daily at 11:05
     * Get effect information
     */
    async getDogmaEffectsEffectId(requestParameters: GetDogmaEffectsEffectIdRequest): Promise<GetDogmaEffectsEffectIdOk> {
        const response = await this.getDogmaEffectsEffectIdRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetDogmaAttributesDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDogmaAttributesAttributeIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDogmaDynamicItemsTypeIdItemIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDogmaEffectsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDogmaEffectsEffectIdDatasourceEnum {
    Serenity = 'serenity'
}
