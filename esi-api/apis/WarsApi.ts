/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetWarsWarIdKillmails200Ok,
    GetWarsWarIdKillmails200OkFromJSON,
    GetWarsWarIdKillmails200OkToJSON,
    GetWarsWarIdKillmailsUnprocessableEntity,
    GetWarsWarIdKillmailsUnprocessableEntityFromJSON,
    GetWarsWarIdKillmailsUnprocessableEntityToJSON,
    GetWarsWarIdOk,
    GetWarsWarIdOkFromJSON,
    GetWarsWarIdOkToJSON,
    GetWarsWarIdUnprocessableEntity,
    GetWarsWarIdUnprocessableEntityFromJSON,
    GetWarsWarIdUnprocessableEntityToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
} from '../models';

export interface GetWarsRequest {
    datasource?: GetWarsDatasourceEnum;
    ifNoneMatch?: string;
    maxWarId?: number;
}

export interface GetWarsWarIdRequest {
    warId: number;
    datasource?: GetWarsWarIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetWarsWarIdKillmailsRequest {
    warId: number;
    datasource?: GetWarsWarIdKillmailsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
}

/**
 * 
 */
export class WarsApi extends runtime.BaseAPI {

    /**
     * Return a list of wars  --- Alternate route: `/dev/wars/`  Alternate route: `/legacy/wars/`  Alternate route: `/v1/wars/`  --- This route is cached for up to 3600 seconds
     * List wars
     */
    async getWarsRaw(requestParameters: GetWarsRequest): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.maxWarId !== undefined) {
            queryParameters['max_war_id'] = requestParameters.maxWarId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/wars/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return a list of wars  --- Alternate route: `/dev/wars/`  Alternate route: `/legacy/wars/`  Alternate route: `/v1/wars/`  --- This route is cached for up to 3600 seconds
     * List wars
     */
    async getWars(requestParameters: GetWarsRequest): Promise<Array<number>> {
        const response = await this.getWarsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return details about a war  --- Alternate route: `/dev/wars/{war_id}/`  Alternate route: `/legacy/wars/{war_id}/`  Alternate route: `/v1/wars/{war_id}/`  --- This route is cached for up to 3600 seconds
     * Get war information
     */
    async getWarsWarIdRaw(requestParameters: GetWarsWarIdRequest): Promise<runtime.ApiResponse<GetWarsWarIdOk>> {
        if (requestParameters.warId === null || requestParameters.warId === undefined) {
            throw new runtime.RequiredError('warId','Required parameter requestParameters.warId was null or undefined when calling getWarsWarId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/wars/{war_id}/`.replace(`{${"war_id"}}`, encodeURIComponent(String(requestParameters.warId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWarsWarIdOkFromJSON(jsonValue));
    }

    /**
     * Return details about a war  --- Alternate route: `/dev/wars/{war_id}/`  Alternate route: `/legacy/wars/{war_id}/`  Alternate route: `/v1/wars/{war_id}/`  --- This route is cached for up to 3600 seconds
     * Get war information
     */
    async getWarsWarId(requestParameters: GetWarsWarIdRequest): Promise<GetWarsWarIdOk> {
        const response = await this.getWarsWarIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return a list of kills related to a war  --- Alternate route: `/dev/wars/{war_id}/killmails/`  Alternate route: `/legacy/wars/{war_id}/killmails/`  Alternate route: `/v1/wars/{war_id}/killmails/`  --- This route is cached for up to 3600 seconds
     * List kills for a war
     */
    async getWarsWarIdKillmailsRaw(requestParameters: GetWarsWarIdKillmailsRequest): Promise<runtime.ApiResponse<Array<GetWarsWarIdKillmails200Ok>>> {
        if (requestParameters.warId === null || requestParameters.warId === undefined) {
            throw new runtime.RequiredError('warId','Required parameter requestParameters.warId was null or undefined when calling getWarsWarIdKillmails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/wars/{war_id}/killmails/`.replace(`{${"war_id"}}`, encodeURIComponent(String(requestParameters.warId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetWarsWarIdKillmails200OkFromJSON));
    }

    /**
     * Return a list of kills related to a war  --- Alternate route: `/dev/wars/{war_id}/killmails/`  Alternate route: `/legacy/wars/{war_id}/killmails/`  Alternate route: `/v1/wars/{war_id}/killmails/`  --- This route is cached for up to 3600 seconds
     * List kills for a war
     */
    async getWarsWarIdKillmails(requestParameters: GetWarsWarIdKillmailsRequest): Promise<Array<GetWarsWarIdKillmails200Ok>> {
        const response = await this.getWarsWarIdKillmailsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetWarsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWarsWarIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWarsWarIdKillmailsDatasourceEnum {
    Serenity = 'serenity'
}
