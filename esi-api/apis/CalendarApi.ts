/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdCalendar200Ok,
    GetCharactersCharacterIdCalendar200OkFromJSON,
    GetCharactersCharacterIdCalendar200OkToJSON,
    GetCharactersCharacterIdCalendarEventIdAttendees200Ok,
    GetCharactersCharacterIdCalendarEventIdAttendees200OkFromJSON,
    GetCharactersCharacterIdCalendarEventIdAttendees200OkToJSON,
    GetCharactersCharacterIdCalendarEventIdAttendeesNotFound,
    GetCharactersCharacterIdCalendarEventIdAttendeesNotFoundFromJSON,
    GetCharactersCharacterIdCalendarEventIdAttendeesNotFoundToJSON,
    GetCharactersCharacterIdCalendarEventIdNotFound,
    GetCharactersCharacterIdCalendarEventIdNotFoundFromJSON,
    GetCharactersCharacterIdCalendarEventIdNotFoundToJSON,
    GetCharactersCharacterIdCalendarEventIdOk,
    GetCharactersCharacterIdCalendarEventIdOkFromJSON,
    GetCharactersCharacterIdCalendarEventIdOkToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PutCharactersCharacterIdCalendarEventIdResponse,
    PutCharactersCharacterIdCalendarEventIdResponseFromJSON,
    PutCharactersCharacterIdCalendarEventIdResponseToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    Unauthorized,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdCalendarRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdCalendarDatasourceEnum;
    fromEvent?: number;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdCalendarEventIdRequest {
    characterId: number;
    eventId: number;
    datasource?: GetCharactersCharacterIdCalendarEventIdDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdCalendarEventIdAttendeesRequest {
    characterId: number;
    eventId: number;
    datasource?: GetCharactersCharacterIdCalendarEventIdAttendeesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface PutCharactersCharacterIdCalendarEventIdRequest {
    characterId: number;
    eventId: number;
    response: PutCharactersCharacterIdCalendarEventIdResponse;
    datasource?: PutCharactersCharacterIdCalendarEventIdDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class CalendarApi extends runtime.BaseAPI {

    /**
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event  --- Alternate route: `/dev/characters/{character_id}/calendar/`  Alternate route: `/legacy/characters/{character_id}/calendar/`  Alternate route: `/v1/characters/{character_id}/calendar/`  Alternate route: `/v2/characters/{character_id}/calendar/`  --- This route is cached for up to 5 seconds
     * List calendar event summaries
     */
    async getCharactersCharacterIdCalendarRaw(requestParameters: GetCharactersCharacterIdCalendarRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdCalendar200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdCalendar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.fromEvent !== undefined) {
            queryParameters['from_event'] = requestParameters.fromEvent;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-calendar.read_calendar_events.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/calendar/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdCalendar200OkFromJSON));
    }

    /**
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event  --- Alternate route: `/dev/characters/{character_id}/calendar/`  Alternate route: `/legacy/characters/{character_id}/calendar/`  Alternate route: `/v1/characters/{character_id}/calendar/`  Alternate route: `/v2/characters/{character_id}/calendar/`  --- This route is cached for up to 5 seconds
     * List calendar event summaries
     */
    async getCharactersCharacterIdCalendar(requestParameters: GetCharactersCharacterIdCalendarRequest): Promise<Array<GetCharactersCharacterIdCalendar200Ok>> {
        const response = await this.getCharactersCharacterIdCalendarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all the information for a specific event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
     * Get an event
     */
    async getCharactersCharacterIdCalendarEventIdRaw(requestParameters: GetCharactersCharacterIdCalendarEventIdRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdCalendarEventIdOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }

        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-calendar.read_calendar_events.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/calendar/{event_id}/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdCalendarEventIdOkFromJSON(jsonValue));
    }

    /**
     * Get all the information for a specific event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
     * Get an event
     */
    async getCharactersCharacterIdCalendarEventId(requestParameters: GetCharactersCharacterIdCalendarEventIdRequest): Promise<GetCharactersCharacterIdCalendarEventIdOk> {
        const response = await this.getCharactersCharacterIdCalendarEventIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all invited attendees for a given event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v1/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v2/characters/{character_id}/calendar/{event_id}/attendees/`  --- This route is cached for up to 600 seconds
     * Get attendees
     */
    async getCharactersCharacterIdCalendarEventIdAttendeesRaw(requestParameters: GetCharactersCharacterIdCalendarEventIdAttendeesRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdCalendarEventIdAttendees200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdCalendarEventIdAttendees.');
        }

        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getCharactersCharacterIdCalendarEventIdAttendees.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-calendar.read_calendar_events.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/calendar/{event_id}/attendees/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdCalendarEventIdAttendees200OkFromJSON));
    }

    /**
     * Get all invited attendees for a given event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v1/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v2/characters/{character_id}/calendar/{event_id}/attendees/`  --- This route is cached for up to 600 seconds
     * Get attendees
     */
    async getCharactersCharacterIdCalendarEventIdAttendees(requestParameters: GetCharactersCharacterIdCalendarEventIdAttendeesRequest): Promise<Array<GetCharactersCharacterIdCalendarEventIdAttendees200Ok>> {
        const response = await this.getCharactersCharacterIdCalendarEventIdAttendeesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Set your response status to an event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
     * Respond to an event
     */
    async putCharactersCharacterIdCalendarEventIdRaw(requestParameters: PutCharactersCharacterIdCalendarEventIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }

        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }

        if (requestParameters.response === null || requestParameters.response === undefined) {
            throw new runtime.RequiredError('response','Required parameter requestParameters.response was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-calendar.respond_calendar_events.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/calendar/{event_id}/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))).replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCharactersCharacterIdCalendarEventIdResponseToJSON(requestParameters.response),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set your response status to an event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
     * Respond to an event
     */
    async putCharactersCharacterIdCalendarEventId(requestParameters: PutCharactersCharacterIdCalendarEventIdRequest): Promise<void> {
        await this.putCharactersCharacterIdCalendarEventIdRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdCalendarDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdCalendarEventIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdCalendarEventIdAttendeesDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PutCharactersCharacterIdCalendarEventIdDatasourceEnum {
    Serenity = 'serenity'
}
