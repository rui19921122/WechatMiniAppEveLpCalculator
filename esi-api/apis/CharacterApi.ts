/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdAgentsResearch200Ok,
    GetCharactersCharacterIdAgentsResearch200OkFromJSON,
    GetCharactersCharacterIdAgentsResearch200OkToJSON,
    GetCharactersCharacterIdBlueprints200Ok,
    GetCharactersCharacterIdBlueprints200OkFromJSON,
    GetCharactersCharacterIdBlueprints200OkToJSON,
    GetCharactersCharacterIdCorporationhistory200Ok,
    GetCharactersCharacterIdCorporationhistory200OkFromJSON,
    GetCharactersCharacterIdCorporationhistory200OkToJSON,
    GetCharactersCharacterIdFatigueOk,
    GetCharactersCharacterIdFatigueOkFromJSON,
    GetCharactersCharacterIdFatigueOkToJSON,
    GetCharactersCharacterIdMedals200Ok,
    GetCharactersCharacterIdMedals200OkFromJSON,
    GetCharactersCharacterIdMedals200OkToJSON,
    GetCharactersCharacterIdNotFound,
    GetCharactersCharacterIdNotFoundFromJSON,
    GetCharactersCharacterIdNotFoundToJSON,
    GetCharactersCharacterIdNotifications200Ok,
    GetCharactersCharacterIdNotifications200OkFromJSON,
    GetCharactersCharacterIdNotifications200OkToJSON,
    GetCharactersCharacterIdNotificationsContacts200Ok,
    GetCharactersCharacterIdNotificationsContacts200OkFromJSON,
    GetCharactersCharacterIdNotificationsContacts200OkToJSON,
    GetCharactersCharacterIdOk,
    GetCharactersCharacterIdOkFromJSON,
    GetCharactersCharacterIdOkToJSON,
    GetCharactersCharacterIdPortraitNotFound,
    GetCharactersCharacterIdPortraitNotFoundFromJSON,
    GetCharactersCharacterIdPortraitNotFoundToJSON,
    GetCharactersCharacterIdPortraitOk,
    GetCharactersCharacterIdPortraitOkFromJSON,
    GetCharactersCharacterIdPortraitOkToJSON,
    GetCharactersCharacterIdRolesOk,
    GetCharactersCharacterIdRolesOkFromJSON,
    GetCharactersCharacterIdRolesOkToJSON,
    GetCharactersCharacterIdStandings200Ok,
    GetCharactersCharacterIdStandings200OkFromJSON,
    GetCharactersCharacterIdStandings200OkToJSON,
    GetCharactersCharacterIdTitles200Ok,
    GetCharactersCharacterIdTitles200OkFromJSON,
    GetCharactersCharacterIdTitles200OkToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PostCharactersAffiliation200Ok,
    PostCharactersAffiliation200OkFromJSON,
    PostCharactersAffiliation200OkToJSON,
    PostCharactersAffiliationNotFound,
    PostCharactersAffiliationNotFoundFromJSON,
    PostCharactersAffiliationNotFoundToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    Unauthorized,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface GetCharactersCharacterIdRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdAgentsResearchRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdAgentsResearchDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdBlueprintsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdBlueprintsDatasourceEnum;
    ifNoneMatch?: string;
    page?: number;
    token?: string;
}

export interface GetCharactersCharacterIdCorporationhistoryRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdCorporationhistoryDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdFatigueRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdFatigueDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdMedalsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdMedalsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdNotificationsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdNotificationsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdNotificationsContactsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdNotificationsContactsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdPortraitRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdPortraitDatasourceEnum;
    ifNoneMatch?: string;
}

export interface GetCharactersCharacterIdRolesRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdRolesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdStandingsRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdStandingsDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdTitlesRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdTitlesDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface PostCharactersAffiliationRequest {
    characters: Array<number>;
    datasource?: PostCharactersAffiliationDatasourceEnum;
}

export interface PostCharactersCharacterIdCspaRequest {
    characterId: number;
    characters: Array<number>;
    datasource?: PostCharactersCharacterIdCspaDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class CharacterApi extends runtime.BaseAPI {

    /**
     * Public information about a character  --- Alternate route: `/dev/characters/{character_id}/`  Alternate route: `/v4/characters/{character_id}/`  --- This route is cached for up to 86400 seconds
     * Get character\'s public information
     */
    async getCharactersCharacterIdRaw(requestParameters: GetCharactersCharacterIdRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdOkFromJSON(jsonValue));
    }

    /**
     * Public information about a character  --- Alternate route: `/dev/characters/{character_id}/`  Alternate route: `/v4/characters/{character_id}/`  --- This route is cached for up to 86400 seconds
     * Get character\'s public information
     */
    async getCharactersCharacterId(requestParameters: GetCharactersCharacterIdRequest): Promise<GetCharactersCharacterIdOk> {
        const response = await this.getCharactersCharacterIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: `/legacy/characters/{character_id}/agents_research/`  Alternate route: `/v1/characters/{character_id}/agents_research/`  --- This route is cached for up to 3600 seconds
     * Get agents research
     */
    async getCharactersCharacterIdAgentsResearchRaw(requestParameters: GetCharactersCharacterIdAgentsResearchRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdAgentsResearch200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdAgentsResearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_agents_research.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/agents_research/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdAgentsResearch200OkFromJSON));
    }

    /**
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: `/legacy/characters/{character_id}/agents_research/`  Alternate route: `/v1/characters/{character_id}/agents_research/`  --- This route is cached for up to 3600 seconds
     * Get agents research
     */
    async getCharactersCharacterIdAgentsResearch(requestParameters: GetCharactersCharacterIdAgentsResearchRequest): Promise<Array<GetCharactersCharacterIdAgentsResearch200Ok>> {
        const response = await this.getCharactersCharacterIdAgentsResearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return a list of blueprints the character owns  --- Alternate route: `/v2/characters/{character_id}/blueprints/`  --- This route is cached for up to 3600 seconds
     * Get blueprints
     */
    async getCharactersCharacterIdBlueprintsRaw(requestParameters: GetCharactersCharacterIdBlueprintsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdBlueprints200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdBlueprints.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_blueprints.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/blueprints/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdBlueprints200OkFromJSON));
    }

    /**
     * Return a list of blueprints the character owns  --- Alternate route: `/v2/characters/{character_id}/blueprints/`  --- This route is cached for up to 3600 seconds
     * Get blueprints
     */
    async getCharactersCharacterIdBlueprints(requestParameters: GetCharactersCharacterIdBlueprintsRequest): Promise<Array<GetCharactersCharacterIdBlueprints200Ok>> {
        const response = await this.getCharactersCharacterIdBlueprintsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all the corporations a character has been a member of  --- Alternate route: `/legacy/characters/{character_id}/corporationhistory/`  Alternate route: `/v1/characters/{character_id}/corporationhistory/`  --- This route is cached for up to 86400 seconds
     * Get corporation history
     */
    async getCharactersCharacterIdCorporationhistoryRaw(requestParameters: GetCharactersCharacterIdCorporationhistoryRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdCorporationhistory200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdCorporationhistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/corporationhistory/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdCorporationhistory200OkFromJSON));
    }

    /**
     * Get a list of all the corporations a character has been a member of  --- Alternate route: `/legacy/characters/{character_id}/corporationhistory/`  Alternate route: `/v1/characters/{character_id}/corporationhistory/`  --- This route is cached for up to 86400 seconds
     * Get corporation history
     */
    async getCharactersCharacterIdCorporationhistory(requestParameters: GetCharactersCharacterIdCorporationhistoryRequest): Promise<Array<GetCharactersCharacterIdCorporationhistory200Ok>> {
        const response = await this.getCharactersCharacterIdCorporationhistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return a character\'s jump activation and fatigue information  --- Alternate route: `/legacy/characters/{character_id}/fatigue/`  Alternate route: `/v1/characters/{character_id}/fatigue/`  --- This route is cached for up to 300 seconds
     * Get jump fatigue
     */
    async getCharactersCharacterIdFatigueRaw(requestParameters: GetCharactersCharacterIdFatigueRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdFatigueOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdFatigue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_fatigue.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/fatigue/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdFatigueOkFromJSON(jsonValue));
    }

    /**
     * Return a character\'s jump activation and fatigue information  --- Alternate route: `/legacy/characters/{character_id}/fatigue/`  Alternate route: `/v1/characters/{character_id}/fatigue/`  --- This route is cached for up to 300 seconds
     * Get jump fatigue
     */
    async getCharactersCharacterIdFatigue(requestParameters: GetCharactersCharacterIdFatigueRequest): Promise<GetCharactersCharacterIdFatigueOk> {
        const response = await this.getCharactersCharacterIdFatigueRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return a list of medals the character has  --- Alternate route: `/legacy/characters/{character_id}/medals/`  Alternate route: `/v1/characters/{character_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get medals
     */
    async getCharactersCharacterIdMedalsRaw(requestParameters: GetCharactersCharacterIdMedalsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdMedals200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdMedals.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_medals.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/medals/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdMedals200OkFromJSON));
    }

    /**
     * Return a list of medals the character has  --- Alternate route: `/legacy/characters/{character_id}/medals/`  Alternate route: `/v1/characters/{character_id}/medals/`  --- This route is cached for up to 3600 seconds
     * Get medals
     */
    async getCharactersCharacterIdMedals(requestParameters: GetCharactersCharacterIdMedalsRequest): Promise<Array<GetCharactersCharacterIdMedals200Ok>> {
        const response = await this.getCharactersCharacterIdMedalsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return character notifications  --- Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
     * Get character notifications
     */
    async getCharactersCharacterIdNotificationsRaw(requestParameters: GetCharactersCharacterIdNotificationsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdNotifications200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdNotifications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_notifications.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/notifications/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdNotifications200OkFromJSON));
    }

    /**
     * Return character notifications  --- Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
     * Get character notifications
     */
    async getCharactersCharacterIdNotifications(requestParameters: GetCharactersCharacterIdNotificationsRequest): Promise<Array<GetCharactersCharacterIdNotifications200Ok>> {
        const response = await this.getCharactersCharacterIdNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return notifications about having been added to someone\'s contact list  --- Alternate route: `/legacy/characters/{character_id}/notifications/contacts/`  Alternate route: `/v1/characters/{character_id}/notifications/contacts/`  --- This route is cached for up to 600 seconds
     * Get new contact notifications
     */
    async getCharactersCharacterIdNotificationsContactsRaw(requestParameters: GetCharactersCharacterIdNotificationsContactsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdNotificationsContacts200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdNotificationsContacts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_notifications.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/notifications/contacts/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdNotificationsContacts200OkFromJSON));
    }

    /**
     * Return notifications about having been added to someone\'s contact list  --- Alternate route: `/legacy/characters/{character_id}/notifications/contacts/`  Alternate route: `/v1/characters/{character_id}/notifications/contacts/`  --- This route is cached for up to 600 seconds
     * Get new contact notifications
     */
    async getCharactersCharacterIdNotificationsContacts(requestParameters: GetCharactersCharacterIdNotificationsContactsRequest): Promise<Array<GetCharactersCharacterIdNotificationsContacts200Ok>> {
        const response = await this.getCharactersCharacterIdNotificationsContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get portrait urls for a character  --- Alternate route: `/v2/characters/{character_id}/portrait/`  --- This route expires daily at 11:05  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/portrait/)
     * Get character portraits
     */
    async getCharactersCharacterIdPortraitRaw(requestParameters: GetCharactersCharacterIdPortraitRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdPortraitOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdPortrait.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        const response = await this.request({
            path: `/characters/{character_id}/portrait/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdPortraitOkFromJSON(jsonValue));
    }

    /**
     * Get portrait urls for a character  --- Alternate route: `/v2/characters/{character_id}/portrait/`  --- This route expires daily at 11:05  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/portrait/)
     * Get character portraits
     */
    async getCharactersCharacterIdPortrait(requestParameters: GetCharactersCharacterIdPortraitRequest): Promise<GetCharactersCharacterIdPortraitOk> {
        const response = await this.getCharactersCharacterIdPortraitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a character\'s corporation roles  --- Alternate route: `/v2/characters/{character_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation roles
     */
    async getCharactersCharacterIdRolesRaw(requestParameters: GetCharactersCharacterIdRolesRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdRolesOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_corporation_roles.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/roles/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdRolesOkFromJSON(jsonValue));
    }

    /**
     * Returns a character\'s corporation roles  --- Alternate route: `/v2/characters/{character_id}/roles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation roles
     */
    async getCharactersCharacterIdRoles(requestParameters: GetCharactersCharacterIdRolesRequest): Promise<GetCharactersCharacterIdRolesOk> {
        const response = await this.getCharactersCharacterIdRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: `/legacy/characters/{character_id}/standings/`  Alternate route: `/v1/characters/{character_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get standings
     */
    async getCharactersCharacterIdStandingsRaw(requestParameters: GetCharactersCharacterIdStandingsRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdStandings200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdStandings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_standings.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/standings/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdStandings200OkFromJSON));
    }

    /**
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: `/legacy/characters/{character_id}/standings/`  Alternate route: `/v1/characters/{character_id}/standings/`  --- This route is cached for up to 3600 seconds
     * Get standings
     */
    async getCharactersCharacterIdStandings(requestParameters: GetCharactersCharacterIdStandingsRequest): Promise<Array<GetCharactersCharacterIdStandings200Ok>> {
        const response = await this.getCharactersCharacterIdStandingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a character\'s titles  --- Alternate route: `/legacy/characters/{character_id}/titles/`  Alternate route: `/v1/characters/{character_id}/titles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation titles
     */
    async getCharactersCharacterIdTitlesRaw(requestParameters: GetCharactersCharacterIdTitlesRequest): Promise<runtime.ApiResponse<Array<GetCharactersCharacterIdTitles200Ok>>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdTitles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_titles.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/titles/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCharactersCharacterIdTitles200OkFromJSON));
    }

    /**
     * Returns a character\'s titles  --- Alternate route: `/legacy/characters/{character_id}/titles/`  Alternate route: `/v1/characters/{character_id}/titles/`  --- This route is cached for up to 3600 seconds
     * Get character corporation titles
     */
    async getCharactersCharacterIdTitles(requestParameters: GetCharactersCharacterIdTitlesRequest): Promise<Array<GetCharactersCharacterIdTitles200Ok>> {
        const response = await this.getCharactersCharacterIdTitlesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: `/legacy/characters/affiliation/`  Alternate route: `/v1/characters/affiliation/`  --- This route is cached for up to 3600 seconds  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#POST-/characters/affiliation/)
     * Character affiliation
     */
    async postCharactersAffiliationRaw(requestParameters: PostCharactersAffiliationRequest): Promise<runtime.ApiResponse<Array<PostCharactersAffiliation200Ok>>> {
        if (requestParameters.characters === null || requestParameters.characters === undefined) {
            throw new runtime.RequiredError('characters','Required parameter requestParameters.characters was null or undefined when calling postCharactersAffiliation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/characters/affiliation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.characters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostCharactersAffiliation200OkFromJSON));
    }

    /**
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: `/legacy/characters/affiliation/`  Alternate route: `/v1/characters/affiliation/`  --- This route is cached for up to 3600 seconds  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#POST-/characters/affiliation/)
     * Character affiliation
     */
    async postCharactersAffiliation(requestParameters: PostCharactersAffiliationRequest): Promise<Array<PostCharactersAffiliation200Ok>> {
        const response = await this.postCharactersAffiliationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Takes a source character ID in the url and a set of target character ID\'s in the body, returns a CSPA charge cost  --- Alternate route: `/v4/characters/{character_id}/cspa/` 
     * Calculate a CSPA charge cost
     */
    async postCharactersCharacterIdCspaRaw(requestParameters: PostCharactersCharacterIdCspaRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling postCharactersCharacterIdCspa.');
        }

        if (requestParameters.characters === null || requestParameters.characters === undefined) {
            throw new runtime.RequiredError('characters','Required parameter requestParameters.characters was null or undefined when calling postCharactersCharacterIdCspa.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-characters.read_contacts.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/cspa/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.characters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Takes a source character ID in the url and a set of target character ID\'s in the body, returns a CSPA charge cost  --- Alternate route: `/v4/characters/{character_id}/cspa/` 
     * Calculate a CSPA charge cost
     */
    async postCharactersCharacterIdCspa(requestParameters: PostCharactersCharacterIdCspaRequest): Promise<number> {
        const response = await this.postCharactersCharacterIdCspaRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdAgentsResearchDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdBlueprintsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdCorporationhistoryDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdFatigueDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdMedalsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdNotificationsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdNotificationsContactsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdPortraitDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdRolesDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdStandingsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdTitlesDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PostCharactersAffiliationDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PostCharactersCharacterIdCspaDatasourceEnum {
    Serenity = 'serenity'
}
