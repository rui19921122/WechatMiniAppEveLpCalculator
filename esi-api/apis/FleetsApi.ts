/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    DeleteFleetsFleetIdMembersMemberIdNotFound,
    DeleteFleetsFleetIdMembersMemberIdNotFoundFromJSON,
    DeleteFleetsFleetIdMembersMemberIdNotFoundToJSON,
    DeleteFleetsFleetIdSquadsSquadIdNotFound,
    DeleteFleetsFleetIdSquadsSquadIdNotFoundFromJSON,
    DeleteFleetsFleetIdSquadsSquadIdNotFoundToJSON,
    DeleteFleetsFleetIdWingsWingIdNotFound,
    DeleteFleetsFleetIdWingsWingIdNotFoundFromJSON,
    DeleteFleetsFleetIdWingsWingIdNotFoundToJSON,
    ErrorLimited,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeout,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdFleetNotFound,
    GetCharactersCharacterIdFleetNotFoundFromJSON,
    GetCharactersCharacterIdFleetNotFoundToJSON,
    GetCharactersCharacterIdFleetOk,
    GetCharactersCharacterIdFleetOkFromJSON,
    GetCharactersCharacterIdFleetOkToJSON,
    GetFleetsFleetIdMembers200Ok,
    GetFleetsFleetIdMembers200OkFromJSON,
    GetFleetsFleetIdMembers200OkToJSON,
    GetFleetsFleetIdMembersNotFound,
    GetFleetsFleetIdMembersNotFoundFromJSON,
    GetFleetsFleetIdMembersNotFoundToJSON,
    GetFleetsFleetIdNotFound,
    GetFleetsFleetIdNotFoundFromJSON,
    GetFleetsFleetIdNotFoundToJSON,
    GetFleetsFleetIdOk,
    GetFleetsFleetIdOkFromJSON,
    GetFleetsFleetIdOkToJSON,
    GetFleetsFleetIdWings200Ok,
    GetFleetsFleetIdWings200OkFromJSON,
    GetFleetsFleetIdWings200OkToJSON,
    GetFleetsFleetIdWingsNotFound,
    GetFleetsFleetIdWingsNotFoundFromJSON,
    GetFleetsFleetIdWingsNotFoundToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    PostFleetsFleetIdMembersInvitation,
    PostFleetsFleetIdMembersInvitationFromJSON,
    PostFleetsFleetIdMembersInvitationToJSON,
    PostFleetsFleetIdMembersNotFound,
    PostFleetsFleetIdMembersNotFoundFromJSON,
    PostFleetsFleetIdMembersNotFoundToJSON,
    PostFleetsFleetIdMembersUnprocessableEntity,
    PostFleetsFleetIdMembersUnprocessableEntityFromJSON,
    PostFleetsFleetIdMembersUnprocessableEntityToJSON,
    PostFleetsFleetIdWingsCreated,
    PostFleetsFleetIdWingsCreatedFromJSON,
    PostFleetsFleetIdWingsCreatedToJSON,
    PostFleetsFleetIdWingsNotFound,
    PostFleetsFleetIdWingsNotFoundFromJSON,
    PostFleetsFleetIdWingsNotFoundToJSON,
    PostFleetsFleetIdWingsWingIdSquadsCreated,
    PostFleetsFleetIdWingsWingIdSquadsCreatedFromJSON,
    PostFleetsFleetIdWingsWingIdSquadsCreatedToJSON,
    PostFleetsFleetIdWingsWingIdSquadsNotFound,
    PostFleetsFleetIdWingsWingIdSquadsNotFoundFromJSON,
    PostFleetsFleetIdWingsWingIdSquadsNotFoundToJSON,
    PutFleetsFleetIdMembersMemberIdMovement,
    PutFleetsFleetIdMembersMemberIdMovementFromJSON,
    PutFleetsFleetIdMembersMemberIdMovementToJSON,
    PutFleetsFleetIdMembersMemberIdNotFound,
    PutFleetsFleetIdMembersMemberIdNotFoundFromJSON,
    PutFleetsFleetIdMembersMemberIdNotFoundToJSON,
    PutFleetsFleetIdMembersMemberIdUnprocessableEntity,
    PutFleetsFleetIdMembersMemberIdUnprocessableEntityFromJSON,
    PutFleetsFleetIdMembersMemberIdUnprocessableEntityToJSON,
    PutFleetsFleetIdNewSettings,
    PutFleetsFleetIdNewSettingsFromJSON,
    PutFleetsFleetIdNewSettingsToJSON,
    PutFleetsFleetIdNotFound,
    PutFleetsFleetIdNotFoundFromJSON,
    PutFleetsFleetIdNotFoundToJSON,
    PutFleetsFleetIdSquadsSquadIdNaming,
    PutFleetsFleetIdSquadsSquadIdNamingFromJSON,
    PutFleetsFleetIdSquadsSquadIdNamingToJSON,
    PutFleetsFleetIdSquadsSquadIdNotFound,
    PutFleetsFleetIdSquadsSquadIdNotFoundFromJSON,
    PutFleetsFleetIdSquadsSquadIdNotFoundToJSON,
    PutFleetsFleetIdWingsWingIdNaming,
    PutFleetsFleetIdWingsWingIdNamingFromJSON,
    PutFleetsFleetIdWingsWingIdNamingToJSON,
    PutFleetsFleetIdWingsWingIdNotFound,
    PutFleetsFleetIdWingsWingIdNotFoundFromJSON,
    PutFleetsFleetIdWingsWingIdNotFoundToJSON,
    ServiceUnavailable,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    Unauthorized,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models';

export interface DeleteFleetsFleetIdMembersMemberIdRequest {
    fleetId: number;
    memberId: number;
    datasource?: DeleteFleetsFleetIdMembersMemberIdDatasourceEnum;
    token?: string;
}

export interface DeleteFleetsFleetIdSquadsSquadIdRequest {
    fleetId: number;
    squadId: number;
    datasource?: DeleteFleetsFleetIdSquadsSquadIdDatasourceEnum;
    token?: string;
}

export interface DeleteFleetsFleetIdWingsWingIdRequest {
    fleetId: number;
    wingId: number;
    datasource?: DeleteFleetsFleetIdWingsWingIdDatasourceEnum;
    token?: string;
}

export interface GetCharactersCharacterIdFleetRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdFleetDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetFleetsFleetIdRequest {
    fleetId: number;
    datasource?: GetFleetsFleetIdDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetFleetsFleetIdMembersRequest {
    fleetId: number;
    acceptLanguage?: GetFleetsFleetIdMembersAcceptLanguageEnum;
    datasource?: GetFleetsFleetIdMembersDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetFleetsFleetIdMembersLanguageEnum;
    token?: string;
}

export interface GetFleetsFleetIdWingsRequest {
    fleetId: number;
    acceptLanguage?: GetFleetsFleetIdWingsAcceptLanguageEnum;
    datasource?: GetFleetsFleetIdWingsDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetFleetsFleetIdWingsLanguageEnum;
    token?: string;
}

export interface PostFleetsFleetIdMembersRequest {
    fleetId: number;
    invitation: PostFleetsFleetIdMembersInvitation;
    datasource?: PostFleetsFleetIdMembersDatasourceEnum;
    token?: string;
}

export interface PostFleetsFleetIdWingsRequest {
    fleetId: number;
    datasource?: PostFleetsFleetIdWingsDatasourceEnum;
    token?: string;
}

export interface PostFleetsFleetIdWingsWingIdSquadsRequest {
    fleetId: number;
    wingId: number;
    datasource?: PostFleetsFleetIdWingsWingIdSquadsDatasourceEnum;
    token?: string;
}

export interface PutFleetsFleetIdRequest {
    fleetId: number;
    newSettings: PutFleetsFleetIdNewSettings;
    datasource?: PutFleetsFleetIdDatasourceEnum;
    token?: string;
}

export interface PutFleetsFleetIdMembersMemberIdRequest {
    fleetId: number;
    memberId: number;
    movement: PutFleetsFleetIdMembersMemberIdMovement;
    datasource?: PutFleetsFleetIdMembersMemberIdDatasourceEnum;
    token?: string;
}

export interface PutFleetsFleetIdSquadsSquadIdRequest {
    fleetId: number;
    squadId: number;
    naming: PutFleetsFleetIdSquadsSquadIdNaming;
    datasource?: PutFleetsFleetIdSquadsSquadIdDatasourceEnum;
    token?: string;
}

export interface PutFleetsFleetIdWingsWingIdRequest {
    fleetId: number;
    wingId: number;
    naming: PutFleetsFleetIdWingsWingIdNaming;
    datasource?: PutFleetsFleetIdWingsWingIdDatasourceEnum;
    token?: string;
}

/**
 * 
 */
export class FleetsApi extends runtime.BaseAPI {

    /**
     * Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * Kick fleet member
     */
    async deleteFleetsFleetIdMembersMemberIdRaw(requestParameters: DeleteFleetsFleetIdMembersMemberIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }

        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/members/{member_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * Kick fleet member
     */
    async deleteFleetsFleetIdMembersMemberId(requestParameters: DeleteFleetsFleetIdMembersMemberIdRequest): Promise<void> {
        await this.deleteFleetsFleetIdMembersMemberIdRaw(requestParameters);
    }

    /**
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * Delete fleet squad
     */
    async deleteFleetsFleetIdSquadsSquadIdRaw(requestParameters: DeleteFleetsFleetIdSquadsSquadIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }

        if (requestParameters.squadId === null || requestParameters.squadId === undefined) {
            throw new runtime.RequiredError('squadId','Required parameter requestParameters.squadId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/squads/{squad_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"squad_id"}}`, encodeURIComponent(String(requestParameters.squadId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * Delete fleet squad
     */
    async deleteFleetsFleetIdSquadsSquadId(requestParameters: DeleteFleetsFleetIdSquadsSquadIdRequest): Promise<void> {
        await this.deleteFleetsFleetIdSquadsSquadIdRaw(requestParameters);
    }

    /**
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * Delete fleet wing
     */
    async deleteFleetsFleetIdWingsWingIdRaw(requestParameters: DeleteFleetsFleetIdWingsWingIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }

        if (requestParameters.wingId === null || requestParameters.wingId === undefined) {
            throw new runtime.RequiredError('wingId','Required parameter requestParameters.wingId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/wings/{wing_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"wing_id"}}`, encodeURIComponent(String(requestParameters.wingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * Delete fleet wing
     */
    async deleteFleetsFleetIdWingsWingId(requestParameters: DeleteFleetsFleetIdWingsWingIdRequest): Promise<void> {
        await this.deleteFleetsFleetIdWingsWingIdRaw(requestParameters);
    }

    /**
     * Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
     * Get character fleet info
     */
    async getCharactersCharacterIdFleetRaw(requestParameters: GetCharactersCharacterIdFleetRequest): Promise<runtime.ApiResponse<GetCharactersCharacterIdFleetOk>> {
        if (requestParameters.characterId === null || requestParameters.characterId === undefined) {
            throw new runtime.RequiredError('characterId','Required parameter requestParameters.characterId was null or undefined when calling getCharactersCharacterIdFleet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.read_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/characters/{character_id}/fleet/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters.characterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdFleetOkFromJSON(jsonValue));
    }

    /**
     * Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evepc.163.com/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
     * Get character fleet info
     */
    async getCharactersCharacterIdFleet(requestParameters: GetCharactersCharacterIdFleetRequest): Promise<GetCharactersCharacterIdFleetOk> {
        const response = await this.getCharactersCharacterIdFleetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds
     * Get fleet information
     */
    async getFleetsFleetIdRaw(requestParameters: GetFleetsFleetIdRequest): Promise<runtime.ApiResponse<GetFleetsFleetIdOk>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling getFleetsFleetId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.read_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFleetsFleetIdOkFromJSON(jsonValue));
    }

    /**
     * Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds
     * Get fleet information
     */
    async getFleetsFleetId(requestParameters: GetFleetsFleetIdRequest): Promise<GetFleetsFleetIdOk> {
        const response = await this.getFleetsFleetIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds
     * Get fleet members
     */
    async getFleetsFleetIdMembersRaw(requestParameters: GetFleetsFleetIdMembersRequest): Promise<runtime.ApiResponse<Array<GetFleetsFleetIdMembers200Ok>>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling getFleetsFleetIdMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.read_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/members/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetFleetsFleetIdMembers200OkFromJSON));
    }

    /**
     * Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds
     * Get fleet members
     */
    async getFleetsFleetIdMembers(requestParameters: GetFleetsFleetIdMembersRequest): Promise<Array<GetFleetsFleetIdMembers200Ok>> {
        const response = await this.getFleetsFleetIdMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds
     * Get fleet wings
     */
    async getFleetsFleetIdWingsRaw(requestParameters: GetFleetsFleetIdWingsRequest): Promise<runtime.ApiResponse<Array<GetFleetsFleetIdWings200Ok>>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling getFleetsFleetIdWings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.read_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/wings/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetFleetsFleetIdWings200OkFromJSON));
    }

    /**
     * Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds
     * Get fleet wings
     */
    async getFleetsFleetIdWings(requestParameters: GetFleetsFleetIdWingsRequest): Promise<Array<GetFleetsFleetIdWings200Ok>> {
        const response = await this.getFleetsFleetIdWingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` 
     * Create fleet invitation
     */
    async postFleetsFleetIdMembersRaw(requestParameters: PostFleetsFleetIdMembersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling postFleetsFleetIdMembers.');
        }

        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling postFleetsFleetIdMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/members/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFleetsFleetIdMembersInvitationToJSON(requestParameters.invitation),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` 
     * Create fleet invitation
     */
    async postFleetsFleetIdMembers(requestParameters: PostFleetsFleetIdMembersRequest): Promise<void> {
        await this.postFleetsFleetIdMembersRaw(requestParameters);
    }

    /**
     * Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` 
     * Create fleet wing
     */
    async postFleetsFleetIdWingsRaw(requestParameters: PostFleetsFleetIdWingsRequest): Promise<runtime.ApiResponse<PostFleetsFleetIdWingsCreated>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling postFleetsFleetIdWings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/wings/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFleetsFleetIdWingsCreatedFromJSON(jsonValue));
    }

    /**
     * Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` 
     * Create fleet wing
     */
    async postFleetsFleetIdWings(requestParameters: PostFleetsFleetIdWingsRequest): Promise<PostFleetsFleetIdWingsCreated> {
        const response = await this.postFleetsFleetIdWingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` 
     * Create fleet squad
     */
    async postFleetsFleetIdWingsWingIdSquadsRaw(requestParameters: PostFleetsFleetIdWingsWingIdSquadsRequest): Promise<runtime.ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }

        if (requestParameters.wingId === null || requestParameters.wingId === undefined) {
            throw new runtime.RequiredError('wingId','Required parameter requestParameters.wingId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/wings/{wing_id}/squads/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"wing_id"}}`, encodeURIComponent(String(requestParameters.wingId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFleetsFleetIdWingsWingIdSquadsCreatedFromJSON(jsonValue));
    }

    /**
     * Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` 
     * Create fleet squad
     */
    async postFleetsFleetIdWingsWingIdSquads(requestParameters: PostFleetsFleetIdWingsWingIdSquadsRequest): Promise<PostFleetsFleetIdWingsWingIdSquadsCreated> {
        const response = await this.postFleetsFleetIdWingsWingIdSquadsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` 
     * Update fleet
     */
    async putFleetsFleetIdRaw(requestParameters: PutFleetsFleetIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling putFleetsFleetId.');
        }

        if (requestParameters.newSettings === null || requestParameters.newSettings === undefined) {
            throw new runtime.RequiredError('newSettings','Required parameter requestParameters.newSettings was null or undefined when calling putFleetsFleetId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFleetsFleetIdNewSettingsToJSON(requestParameters.newSettings),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` 
     * Update fleet
     */
    async putFleetsFleetId(requestParameters: PutFleetsFleetIdRequest): Promise<void> {
        await this.putFleetsFleetIdRaw(requestParameters);
    }

    /**
     * Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * Move fleet member
     */
    async putFleetsFleetIdMembersMemberIdRaw(requestParameters: PutFleetsFleetIdMembersMemberIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }

        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }

        if (requestParameters.movement === null || requestParameters.movement === undefined) {
            throw new runtime.RequiredError('movement','Required parameter requestParameters.movement was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/members/{member_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFleetsFleetIdMembersMemberIdMovementToJSON(requestParameters.movement),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * Move fleet member
     */
    async putFleetsFleetIdMembersMemberId(requestParameters: PutFleetsFleetIdMembersMemberIdRequest): Promise<void> {
        await this.putFleetsFleetIdMembersMemberIdRaw(requestParameters);
    }

    /**
     * Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * Rename fleet squad
     */
    async putFleetsFleetIdSquadsSquadIdRaw(requestParameters: PutFleetsFleetIdSquadsSquadIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }

        if (requestParameters.squadId === null || requestParameters.squadId === undefined) {
            throw new runtime.RequiredError('squadId','Required parameter requestParameters.squadId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }

        if (requestParameters.naming === null || requestParameters.naming === undefined) {
            throw new runtime.RequiredError('naming','Required parameter requestParameters.naming was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/squads/{squad_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"squad_id"}}`, encodeURIComponent(String(requestParameters.squadId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFleetsFleetIdSquadsSquadIdNamingToJSON(requestParameters.naming),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * Rename fleet squad
     */
    async putFleetsFleetIdSquadsSquadId(requestParameters: PutFleetsFleetIdSquadsSquadIdRequest): Promise<void> {
        await this.putFleetsFleetIdSquadsSquadIdRaw(requestParameters);
    }

    /**
     * Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * Rename fleet wing
     */
    async putFleetsFleetIdWingsWingIdRaw(requestParameters: PutFleetsFleetIdWingsWingIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fleetId === null || requestParameters.fleetId === undefined) {
            throw new runtime.RequiredError('fleetId','Required parameter requestParameters.fleetId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }

        if (requestParameters.wingId === null || requestParameters.wingId === undefined) {
            throw new runtime.RequiredError('wingId','Required parameter requestParameters.wingId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }

        if (requestParameters.naming === null || requestParameters.naming === undefined) {
            throw new runtime.RequiredError('naming','Required parameter requestParameters.naming was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasource !== undefined) {
            queryParameters['datasource'] = requestParameters.datasource;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("evesso", ["esi-fleets.write_fleet.v1"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/fleets/{fleet_id}/wings/{wing_id}/`.replace(`{${"fleet_id"}}`, encodeURIComponent(String(requestParameters.fleetId))).replace(`{${"wing_id"}}`, encodeURIComponent(String(requestParameters.wingId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFleetsFleetIdWingsWingIdNamingToJSON(requestParameters.naming),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * Rename fleet wing
     */
    async putFleetsFleetIdWingsWingId(requestParameters: PutFleetsFleetIdWingsWingIdRequest): Promise<void> {
        await this.putFleetsFleetIdWingsWingIdRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DeleteFleetsFleetIdMembersMemberIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteFleetsFleetIdSquadsSquadIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteFleetsFleetIdWingsWingIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdFleetDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdMembersAcceptLanguageEnum {
    EnUs = 'en-us',
    Zh = 'zh'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdMembersDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdMembersLanguageEnum {
    EnUs = 'en-us',
    Zh = 'zh'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdWingsAcceptLanguageEnum {
    EnUs = 'en-us',
    Zh = 'zh'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdWingsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFleetsFleetIdWingsLanguageEnum {
    EnUs = 'en-us',
    Zh = 'zh'
}
/**
    * @export
    * @enum {string}
    */
export enum PostFleetsFleetIdMembersDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PostFleetsFleetIdWingsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PostFleetsFleetIdWingsWingIdSquadsDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PutFleetsFleetIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PutFleetsFleetIdMembersMemberIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PutFleetsFleetIdSquadsSquadIdDatasourceEnum {
    Serenity = 'serenity'
}
/**
    * @export
    * @enum {string}
    */
export enum PutFleetsFleetIdWingsWingIdDatasourceEnum {
    Serenity = 'serenity'
}
