/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GetCorporationsCorporationIdStructuresService,
    GetCorporationsCorporationIdStructuresServiceFromJSON,
    GetCorporationsCorporationIdStructuresServiceFromJSONTyped,
    GetCorporationsCorporationIdStructuresServiceToJSON,
} from './';

/**
 * 200 ok object
 * @export
 * @interface GetCorporationsCorporationIdStructures200Ok
 */
export interface GetCorporationsCorporationIdStructures200Ok {
    /**
     * ID of the corporation that owns the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    corporationId: number;
    /**
     * Date on which the structure will run out of fuel
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    fuelExpires?: Date;
    /**
     * The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    nextReinforceApply?: Date;
    /**
     * The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    nextReinforceHour?: number;
    /**
     * The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    nextReinforceWeekday?: number;
    /**
     * The id of the ACL profile for this citadel
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    profileId: number;
    /**
     * The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    reinforceHour: number;
    /**
     * The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    reinforceWeekday?: number;
    /**
     * Contains a list of service upgrades, and their state
     * @type {Array<GetCorporationsCorporationIdStructuresService>}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    services?: Array<GetCorporationsCorporationIdStructuresService>;
    /**
     * state string
     * @type {string}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    state: GetCorporationsCorporationIdStructures200OkStateEnum;
    /**
     * Date at which the structure will move to it's next state
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    stateTimerEnd?: Date;
    /**
     * Date at which the structure entered it's current state
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    stateTimerStart?: Date;
    /**
     * The Item ID of the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    structureId: number;
    /**
     * The solar system the structure is in
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    systemId: number;
    /**
     * The type id of the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    typeId: number;
    /**
     * Date at which the structure will unanchor
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    unanchorsAt?: Date;
}

export function GetCorporationsCorporationIdStructures200OkFromJSON(json: any): GetCorporationsCorporationIdStructures200Ok {
    return GetCorporationsCorporationIdStructures200OkFromJSONTyped(json, false);
}

export function GetCorporationsCorporationIdStructures200OkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCorporationsCorporationIdStructures200Ok {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'corporationId': json['corporation_id'],
        'fuelExpires': !exists(json, 'fuel_expires') ? undefined : (new Date(json['fuel_expires'])),
        'nextReinforceApply': !exists(json, 'next_reinforce_apply') ? undefined : (new Date(json['next_reinforce_apply'])),
        'nextReinforceHour': !exists(json, 'next_reinforce_hour') ? undefined : json['next_reinforce_hour'],
        'nextReinforceWeekday': !exists(json, 'next_reinforce_weekday') ? undefined : json['next_reinforce_weekday'],
        'profileId': json['profile_id'],
        'reinforceHour': json['reinforce_hour'],
        'reinforceWeekday': !exists(json, 'reinforce_weekday') ? undefined : json['reinforce_weekday'],
        'services': !exists(json, 'services') ? undefined : ((json['services'] as Array<any>).map(GetCorporationsCorporationIdStructuresServiceFromJSON)),
        'state': json['state'],
        'stateTimerEnd': !exists(json, 'state_timer_end') ? undefined : (new Date(json['state_timer_end'])),
        'stateTimerStart': !exists(json, 'state_timer_start') ? undefined : (new Date(json['state_timer_start'])),
        'structureId': json['structure_id'],
        'systemId': json['system_id'],
        'typeId': json['type_id'],
        'unanchorsAt': !exists(json, 'unanchors_at') ? undefined : (new Date(json['unanchors_at'])),
    };
}

export function GetCorporationsCorporationIdStructures200OkToJSON(value?: GetCorporationsCorporationIdStructures200Ok | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'corporation_id': value.corporationId,
        'fuel_expires': value.fuelExpires === undefined ? undefined : (value.fuelExpires.toISOString()),
        'next_reinforce_apply': value.nextReinforceApply === undefined ? undefined : (value.nextReinforceApply.toISOString()),
        'next_reinforce_hour': value.nextReinforceHour,
        'next_reinforce_weekday': value.nextReinforceWeekday,
        'profile_id': value.profileId,
        'reinforce_hour': value.reinforceHour,
        'reinforce_weekday': value.reinforceWeekday,
        'services': value.services === undefined ? undefined : ((value.services as Array<any>).map(GetCorporationsCorporationIdStructuresServiceToJSON)),
        'state': value.state,
        'state_timer_end': value.stateTimerEnd === undefined ? undefined : (value.stateTimerEnd.toISOString()),
        'state_timer_start': value.stateTimerStart === undefined ? undefined : (value.stateTimerStart.toISOString()),
        'structure_id': value.structureId,
        'system_id': value.systemId,
        'type_id': value.typeId,
        'unanchors_at': value.unanchorsAt === undefined ? undefined : (value.unanchorsAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum GetCorporationsCorporationIdStructures200OkStateEnum {
    AnchorVulnerable = 'anchor_vulnerable',
    Anchoring = 'anchoring',
    ArmorReinforce = 'armor_reinforce',
    ArmorVulnerable = 'armor_vulnerable',
    DeployVulnerable = 'deploy_vulnerable',
    FittingInvulnerable = 'fitting_invulnerable',
    HullReinforce = 'hull_reinforce',
    HullVulnerable = 'hull_vulnerable',
    OnlineDeprecated = 'online_deprecated',
    OnliningVulnerable = 'onlining_vulnerable',
    ShieldVulnerable = 'shield_vulnerable',
    Unanchored = 'unanchored',
    Unknown = 'unknown'
}


